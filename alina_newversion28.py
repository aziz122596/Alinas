# -*- coding: utf-8 -*-
import os
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ OpenMP (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

import streamlit as st

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –≤—ã–∑–æ–≤–æ–º st) ---
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≥–æ–¥–∏–π",
    page_icon="üåø",  # –î–æ–±–∞–≤–ª–µ–Ω –∑–Ω–∞—á–æ–∫
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'mailto:your_email@example.com', # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email
        'Report a bug': "mailto:your_email@example.com", # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email
        'About': "### –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≥–æ–¥–∏–π\n–í–µ—Ä—Å–∏—è 1.1\n\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≥–æ–¥–∏–π, —Ä–∞—Å—á–µ—Ç–∞ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤."
    }
)

# --- –ò–º–ø–æ—Ä—Ç—ã ---
import torch
from torch import nn
from torchvision import transforms
from PIL import Image, ExifTags, ImageOps # –î–æ–±–∞–≤–ª–µ–Ω ImageOps –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
import numpy as np
import folium
from streamlit_folium import st_folium
import matplotlib.pyplot as plt
import io
# import base64 # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
from streamlit_option_menu import option_menu
from datetime import datetime
from fpdf import FPDF
import math # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ nan/inf

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ø—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç—É ---
# –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É TTF —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, DejaVuSans.ttf)
# –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å.
FONT_PATH = 'DejaVuSans.ttf'
# ----------------------------------

# --- –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS ---
def set_css():
    st.markdown(
        """
        <style>
        /* --- –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ --- */
        .stApp {
            /* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ü–≤–µ—Ç */
             /* background-image: url(https://–≤–∞—à_url/background.jpg); */
             background-color: #e8f5e9; /* –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω */
             background-size: cover;
             font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        }

        /* --- –ó–∞–≥–æ–ª–æ–≤–∫–∏ --- */
        h1, h2, h3 {
            text-align: center;
            font-weight: 600;
        }
        h1 { /* –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
            color: #1b5e20; /* –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π */
            text-shadow: 1px 1px 2px #a5d6a7; /* –õ–µ–≥–∫–∞—è —Ç–µ–Ω—å */
        }
        h3 { /* –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ */
            color: #388e3c; /* –°—Ä–µ–¥–Ω–µ-–∑–µ–ª–µ–Ω—ã–π */
        }
        .stTabs [data-baseweb="tab-list"] {
             gap: 24px; /* –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏ */
        }
        .stTabs [data-baseweb="tab"] {
            height: 50px;
            white-space: pre-wrap;
            background-color: #c8e6c9; /* –§–æ–Ω —Ç–∞–±–∞ */
            border-radius: 4px 4px 0px 0px;
            gap: 1px;
            padding-top: 10px;
            padding-bottom: 10px;
        }
        .stTabs [aria-selected="true"] {
             background-color: #a5d6a7; /* –§–æ–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–±–∞ */
        }

        /* --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å --- */
        .css-1d391kg { /* –°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö Streamlit */
            background-color: rgba(255, 255, 255, 0.9) !important; /* –ë–µ–ª—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é */
            border-right: 2px solid #a5d6a7; /* –ó–µ–ª–µ–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–∞ */
        }

        /* --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ --- */
        .main .block-container {
             padding-top: 2rem;
             padding-bottom: 2rem;
             padding-left: 3rem;
             padding-right: 3rem;
        }
        .stBlock { /* –û–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –±–ª–æ–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ */
             background-color: rgba(255, 255, 255, 0.85); /* –ë–µ–ª—ã–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é */
             backdrop-filter: blur(5px);
             border-radius: 10px;
             padding: 20px;
             box-shadow: 0 4px 8px rgba(0,0,0,0.1);
             margin-bottom: 1rem; /* –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É */
        }

        /* --- –ö–Ω–æ–ø–∫–∏ --- */
        .stButton button {
            background-color: #4CAF50 !important; /* –ó–µ–ª–µ–Ω—ã–π */
            color: white !important;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            padding: 0.6em 1.2em;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .stButton button:hover {
            background-color: #388E3C !important; /* –¢–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
        }
        .stDownloadButton button {
             background-color: #0277bd !important; /* –°–∏–Ω–∏–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è */
        }
         .stDownloadButton button:hover {
              background-color: #01579b !important;
         }

        /* --- –î—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã --- */
        .stFileUploader label {
            font-weight: bold;
            color: #1b5e20;
        }
        .stSelectbox label, .stNumberInput label, .stSlider label {
            font-weight: bold;
            color: #388e3c;
        }
        .stAlert { /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
             border-radius: 8px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

set_css()

# --- –ú–æ–¥–µ–ª—å –ò–ò (–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä) ---
# --- –ú–æ–¥–µ–ª—å –ò–ò (–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å model.pth) ---
class PlantClassifier(nn.Module):
    def __init__(self):
        super(PlantClassifier, self).__init__()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∏ –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç model.pth
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ—Å–≤—è–∑–Ω–æ–≥–æ —Å–ª–æ—è:
        # –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä 128x128
        # –ü–æ—Å–ª–µ conv1 -> 128x128 (padding=1, stride=1)
        # –ü–æ—Å–ª–µ pool1 -> 64x64
        # –ü–æ—Å–ª–µ conv2 -> 64x64 (padding=1, stride=1)
        # –ü–æ—Å–ª–µ pool2 -> 32x32
        # –†–∞–∑–º–µ—Ä = 64 –∫–∞–Ω–∞–ª–∞ * 32 * 32
        self.fc1 = nn.Linear(64 * 32 * 32, 128)
        self.fc2 = nn.Linear(128, 2) # 2 –≤—ã—Ö–æ–¥–Ω—ã—Ö –∫–ª–∞—Å—Å–∞

    def forward(self, x):
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã—Ö–æ–¥ —Å–≤–µ—Ä—Ç–æ—á–Ω—ã—Ö —Å–ª–æ–µ–≤ –≤ –≤–µ–∫—Ç–æ—Ä
        x = x.view(x.size(0), -1) # x.view(-1, 64 * 32 * 32) —Ç–æ–∂–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ ---
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–∞–Ω–∞–ª–æ–≤ (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ main)
red_index, green_index, blue_index, nir_index = 0, 1, 2, None

def safe_divide(numerator, denominator, epsilon=1e-7):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å."""
    return numerator / (denominator + epsilon)

# --- –ò–Ω–¥–µ–∫—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ NIR ---
def calculate_ndvi(image):
    if nir_index is None: return np.full(image.shape[:2], np.nan) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º NaN –µ—Å–ª–∏ –Ω–µ—Ç NIR
    nir = image[:, :, nir_index].astype(np.float32)
    red = image[:, :, red_index].astype(np.float32)
    return safe_divide(nir - red, nir + red)

def calculate_gndvi(image):
    if nir_index is None: return np.full(image.shape[:2], np.nan)
    nir = image[:, :, nir_index].astype(np.float32)
    green = image[:, :, green_index].astype(np.float32)
    return safe_divide(nir - green, nir + green)

def calculate_endvi(image):
    if nir_index is None: return np.full(image.shape[:2], np.nan)
    nir = image[:, :, nir_index].astype(np.float32)
    green = image[:, :, green_index].astype(np.float32)
    blue = image[:, :, blue_index].astype(np.float32)
    return safe_divide((nir + green) - (2 * blue), (nir + green) + (2 * blue))

def calculate_cvi(image):
    if nir_index is None: return np.full(image.shape[:2], np.nan)
    nir = image[:, :, nir_index].astype(np.float32)
    red = image[:, :, red_index].astype(np.float32)
    green = image[:, :, green_index].astype(np.float32)
    # –î–æ–±–∞–≤–ª—è–µ–º epsilon –∫ green –≤ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
    return safe_divide(nir, green) * safe_divide(red, green)

def calculate_osavi(image):
    if nir_index is None: return np.full(image.shape[:2], np.nan)
    nir = image[:, :, nir_index].astype(np.float32)
    red = image[:, :, red_index].astype(np.float32)
    # –ó–Ω–∞—á–µ–Ω–∏–µ 0.16 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è OSAVI
    return safe_divide(1.5 * (nir - red), nir + red + 0.16)

# --- –ò–Ω–¥–µ–∫—Å—ã, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å RGB ---
def calculate_vari(image):
    red = image[:, :, red_index].astype(np.float32)
    green = image[:, :, green_index].astype(np.float32)
    blue = image[:, :, blue_index].astype(np.float32)
    return safe_divide(green - red, green + red - blue)

def calculate_exg(image):
    red = image[:, :, red_index].astype(np.float32)
    green = image[:, :, green_index].astype(np.float32)
    blue = image[:, :, blue_index].astype(np.float32)
    # ExG (Excess Green) - –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–µ–∫—Å
    return 2 * green - red - blue

def calculate_gli(image):
    red = image[:, :, red_index].astype(np.float32)
    green = image[:, :, green_index].astype(np.float32)
    blue = image[:, :, blue_index].astype(np.float32)
    numerator = 2 * green - red - blue
    denominator = 2 * green + red + blue
    return safe_divide(numerator, denominator)

def calculate_rgbvi(image):
    red = image[:, :, red_index].astype(np.float32) + 1e-7 # –î–æ–±–∞–≤–∏–º —ç–ø—Å–∏–ª–æ–Ω —Å—Ä–∞–∑—É
    green = image[:, :, green_index].astype(np.float32) + 1e-7
    blue = image[:, :, blue_index].astype(np.float32) + 1e-7
    numerator = (green ** 2) - (red * blue)
    denominator = (green ** 2) + (red * blue)
    return safe_divide(numerator, denominator)

# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ ---
def calculate_vegetation_index(image_array, index_name):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å."""
    index_functions = {
        'NDVI': calculate_ndvi,
        'GNDVI': calculate_gndvi,
        'ENDVI': calculate_endvi,
        'CVI': calculate_cvi,
        'OSAVI': calculate_osavi,
        'VARI': calculate_vari,
        'ExG': calculate_exg,
        'GLI': calculate_gli,
        'RGBVI': calculate_rgbvi,
    }
    func = index_functions.get(index_name)
    if func:
        result = func(image_array)
        # –ó–∞–º–µ–Ω—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –Ω–∞ NaN
        result[np.isinf(result)] = np.nan
        return result
    else:
        st.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {index_name}")
        return None

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º ---
@st.cache_resource # –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
def load_model(model_path='model.pth'):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å PyTorch."""
    try:
        model = PlantClassifier()
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ CPU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu'), weights_only=True))
        model.eval() # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
        return model
    except FileNotFoundError:
        st.error(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –º–æ–¥–µ–ª–∏ '{model_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

def predict_image(image_pil_rgb, model, transform):
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏."""
    if model is None:
        return "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"

    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞, —Ç–µ–Ω–∑–æ—Ä, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        input_tensor = transform(image_pil_rgb).unsqueeze(0) # –î–æ–±–∞–≤–ª—è–µ–º batch –∏–∑–º–µ—Ä–µ–Ω–∏–µ

        with torch.no_grad(): # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—á–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
            output = model(input_tensor)
            probabilities = torch.softmax(output, dim=1)
            confidence, predicted_class_index = torch.max(probabilities, 1)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
        class_names = [
            "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ (–Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∑–∞—Å—É—Ö–∞ –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å)", # –ò–Ω–¥–µ–∫—Å 0
            "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ (—Ö–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ–ª–∏–≤–∞)"                # –ò–Ω–¥–µ–∫—Å 1
        ]
        predicted_class_name = class_names[predicted_class_index.item()]
        confidence_percent = confidence.item() * 100

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        return f"{predicted_class_name} (–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence_percent:.1f}%)"

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"

def get_image_metadata(image):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç EXIF –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    metadata = {}
    try:
        exif_data = image.getexif()
        if exif_data:
            for tag_id, value in exif_data.items():
                tag = ExifTags.TAGS.get(tag_id, tag_id)
                metadata[tag] = value
    except Exception:
        # –ò–Ω–æ–≥–¥–∞ getexif –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        pass
    return metadata

def correct_image_orientation(image):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ EXIF –¥–∞–Ω–Ω—ã—Ö."""
    try:
        image = ImageOps.exif_transpose(image)
    except Exception:
         # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å EXIF –∏–ª–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—å
         pass
    return image

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ GSD –∏ –ø–ª–æ—â–∞–¥–∏ ---
def calculate_gsd(flight_altitude, focal_length_mm, sensor_width_mm, sensor_height_mm, image_width_px, image_height_px):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç Ground Sampling Distance (GSD) –≤ –º–µ—Ç—Ä–∞—Ö/–ø–∏–∫—Å–µ–ª—å."""
    if focal_length_mm <= 0 or image_width_px <= 0 or image_height_px <= 0:
        return 0, 0
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä—ã
    focal_length_m = focal_length_mm / 1000.0
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ–Ω—Å–æ—Ä–∞ –≤ –º–µ—Ç—Ä—ã
    sensor_width_m = sensor_width_mm / 1000.0
    sensor_height_m = sensor_height_mm / 1000.0

    gsd_width_m_px = (flight_altitude * sensor_width_m) / (focal_length_m * image_width_px)
    gsd_height_m_px = (flight_altitude * sensor_height_m) / (focal_length_m * image_height_px)
    return gsd_width_m_px, gsd_height_m_px

def calculate_image_area(gsd_width, gsd_height, image_width, image_height):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–≤. –º–µ—Ç—Ä–∞—Ö –∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –∑–µ–º–ª–µ."""
    if gsd_width <= 0 or gsd_height <= 0:
        return 0, 0, 0
    ground_width_m = gsd_width * image_width
    ground_height_m = gsd_height * image_height
    area_m2 = ground_width_m * ground_height_m
    return area_m2, ground_width_m, ground_height_m

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã ---
def interactive_map(center_coords=[57.153033, 65.534328], zoom=5):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É Folium."""
    st.subheader("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞")
    st.caption("–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏).")

    map_object = folium.Map(location=center_coords, zoom_start=zoom, tiles="CartoDB positron") # –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –∫–∞—Ä—Ç—ã
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∏—Å–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # draw = folium.plugins.Draw()
    # draw.add_to(map_object)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É –≤ Streamlit
    st_data = st_folium(map_object, width=700, height=400)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞ (–µ—Å–ª–∏ –±—ã–ª)
    if st_data and st_data.get("last_clicked"):
        coords = st_data['last_clicked']
        st.write(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞: {coords['lat']:.5f}, {coords['lng']:.5f}")

# --- –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞ ---
class PDF(FPDF):
    def header(self):
        if not hasattr(self, 'font_added') or not self.font_added:
            return # –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ö–µ–¥–µ—Ä, –µ—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω

        self.set_font('DejaVu', 'B', 14) # –ö—Ä—É–ø–Ω–µ–µ —à—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.cell(0, 10, '–û—Ç—á–µ—Ç –æ–± –æ—Ü–µ–Ω–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≥–æ–¥–∏–π', 0, 1, 'C')
        self.set_font('DejaVu', '', 9) # –ú–µ–ª—å—á–µ —à—Ä–∏—Ñ—Ç –¥–∞—Ç—ã
        self.cell(0, 8, f'–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}', 0, 1, 'C')
        self.ln(8) # –£–≤–µ–ª–∏—á–∏—Ç—å –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞

    def footer(self):
        if not hasattr(self, 'font_added') or not self.font_added:
            return # –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ—É—Ç–µ—Ä, –µ—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω

        self.set_y(-15) # –ü–æ–∑–∏—Ü–∏—è 1.5 —Å–º –æ—Ç –Ω–∏–∑–∞
        self.set_font('DejaVu', 'I', 8)
        self.cell(0, 10, f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_no()}/{{nb}}', 0, 0, 'C') # {{nb}} –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ–±—â–µ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü

    def chapter_title(self, title):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞."""
        if not hasattr(self, 'font_added') or not self.font_added: return
        self.set_font('DejaVu', 'B', 12)
        self.set_fill_color(230, 240, 230) # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞
        self.cell(0, 8, title, 0, 1, 'L', fill=True)
        self.ln(4)
        self.set_font('DejaVu', '', 11) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç

    def chapter_body(self, content_dict=None, text_list=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞ (–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫)."""
        if not hasattr(self, 'font_added') or not self.font_added: return
        self.set_font('DejaVu', '', 10) # –ß—É—Ç—å –º–µ–ª—å—á–µ —à—Ä–∏—Ñ—Ç –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if content_dict:
            for key, value in content_dict.items():
                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º multi_cell –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫
                 self.multi_cell(0, 6, f'**{key}:** {value}') # –ñ–∏—Ä–Ω—ã–π –∫–ª—é—á
                 self.ln(1) # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø
        if text_list:
            for item in text_list:
                 self.multi_cell(0, 6, f'- {item}')
                 self.ln(1)
        self.ln(4) # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∞

    def add_image_from_buffer(self, img_buffer, title, max_width=180):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
        if not hasattr(self, 'font_added') or not self.font_added: return
        self.chapter_title(title)
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img_pil = Image.open(img_buffer)
            img_width_px, img_height_px = img_pil.size
            aspect_ratio = img_height_px / img_width_px if img_width_px > 0 else 1

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –≤ –º–º –¥–ª—è PDF
            display_width = min(img_width_px * 0.264583, max_width) # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –º–º (–ø—Ä–∏–º–µ—Ä–Ω–æ) –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å. —à–∏—Ä–∏–Ω–æ–π
            display_height = display_width * aspect_ratio

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            x_pos = (self.w - display_width) / 2
            self.image(img_buffer, x=x_pos, w=display_width, h=display_height, type='PNG') # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —è–≤–Ω–æ
            self.ln(display_height + 5) # –û—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        except Exception as e:
            self.set_text_color(255, 0, 0)
            self.multi_cell(0, 5, f'–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "{title}": {e}')
            self.set_text_color(0, 0, 0)
            self.ln(5)

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF ---
def generate_pdf_report(
    original_image_buffer, # –ë—É—Ñ–µ—Ä —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    final_assessment,      # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∏–Ω—Ñ–æ –æ–± –∏–Ω–¥–µ–∫—Å–µ)
    assessment_details,    # –î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏ (—Å—Ä–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å)
    selected_index,
    mean_value_original,   # –°—Ä–µ–¥–Ω–µ–µ –Ω–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    index_map_buffer,      # –ë—É—Ñ–µ—Ä —Å –∫–∞—Ä—Ç–æ–π –∏–Ω–¥–µ–∫—Å–∞
    recommendations,
    area_ha, ground_width, ground_height, area_km2,
    flight_params,
    dryness_threshold_normalized, # –ü–æ—Ä–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    dryness_area_ha, dryness_percent,
    dryness_additive_calc # –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –¥–æ–±–∞–≤–æ–∫
    ):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""

    pdf = PDF('P', 'mm', 'A4') # –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è, –º–º, A4
    pdf.font_added = False # –§–ª–∞–≥, —á—Ç–æ —à—Ä–∏—Ñ—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ ---
    if not os.path.exists(FONT_PATH):
        st.error(f"–û—à–∏–±–∫–∞ PDF: –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {FONT_PATH}")
        return None
    try:
        pdf.add_font('DejaVu', '', FONT_PATH, uni=True)
        pdf.add_font('DejaVu', 'B', FONT_PATH, uni=True) # –ñ–∏—Ä–Ω—ã–π
        pdf.add_font('DejaVu', 'I', FONT_PATH, uni=True) # –ö—É—Ä—Å–∏–≤
        pdf.font_added = True # –®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ PDF –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        return None

    pdf.set_auto_page_break(auto=True, margin=15) # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ—Ç—Å—Ç—É–ø–æ–º —Å–Ω–∏–∑—É 1.5 —Å–º
    pdf.alias_nb_pages() # –í–∫–ª—é—á–∞–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü {nb}
    pdf.add_page()

    # --- 1. –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
    pdf.add_image_from_buffer(original_image_buffer, "1. –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    # --- 2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ ---
    pdf.chapter_title("2. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    analysis_data = {
        "–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è": final_assessment,
        "–î–µ—Ç–∞–ª–∏ –æ—Ü–µ–Ω–∫–∏": assessment_details,
        "–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å": selected_index,
        f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ {selected_index} (–∏—Å—Ö–æ–¥–Ω–æ–µ)": f"{mean_value_original:.3f}" if not math.isnan(mean_value_original) else "N/A",
    }
    pdf.chapter_body(content_dict=analysis_data)

    # --- 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ---
    pdf.chapter_title("3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    pdf.chapter_body(text_list=recommendations)

    # --- 4. –ö–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ ---
    pdf.add_image_from_buffer(index_map_buffer, f"4. –ö–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ {selected_index} (–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)")

    # --- 5. –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if pdf.get_y() > pdf.h - 80: # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å < 80 –º–º –¥–æ –Ω–∏–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pdf.add_page()

    pdf.chapter_title("5. –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ —É–≥–æ–¥–∏–π/–ø–æ–ª–µ–π")
    area_data = {
        "–í—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞": f"{flight_params['altitude']:.1f} –º",
        "–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ": f"{flight_params['focal_length']:.1f} –º–º",
        "–®–∏—Ä–∏–Ω–∞ —Å–µ–Ω—Å–æ—Ä–∞": f"{flight_params['sensor_width']:.1f} –º–º",
        "–í—ã—Å–æ—Ç–∞ —Å–µ–Ω—Å–æ—Ä–∞": f"{flight_params['sensor_height']:.1f} –º–º",
        "--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ---": "", # –ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å": f"{area_ha:.3f} –≥–∞ ({area_km2:.5f} –∫–º¬≤)" if area_ha > 0 else "–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞",
        "–®–∏—Ä–∏–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ": f"{ground_width:.2f} –º" if ground_width > 0 else "N/A",
        "–í—ã—Å–æ—Ç–∞ –Ω–∞ –∑–µ–º–ª–µ": f"{ground_height:.2f} –º" if ground_height > 0 else "N/A",
    }
    pdf.chapter_body(content_dict=area_data)

    # --- 6. –ê–Ω–∞–ª–∏–∑ –∑–∞—Å—É—à–ª–∏–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ ---
    if pdf.get_y() > pdf.h - 60:
        pdf.add_page()

    pdf.chapter_title("6. –ê–Ω–∞–ª–∏–∑ –∑–∞—Å—É—à–ª–∏–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤")
    drought_data = {
       f"–ü–æ—Ä–æ–≥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ {selected_index} –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Å—É—Ö–∏": f"< {dryness_threshold_normalized:.2f}",
       "–†–∞—Å—á–µ—Ç–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∑–∞—Å—É—à–ª–∏–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤": f"{dryness_area_ha:.3f} –≥–∞" if area_ha > 0 else "N/A (–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞)",
       "–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞—Å—É—à–ª–∏–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏": f"{dryness_percent:.1f}%" if area_ha > 0 else "N/A",
       "--- –†–∞—Å—á–µ—Ç –¥–æ–±–∞–≤–æ–∫ (–ü—Ä–∏–º–µ—Ä) ---": "",
       "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": dryness_additive_calc # –¢–µ–∫—Å—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    }
    pdf.chapter_body(content_dict=drought_data)

    # --- –í—ã–≤–æ–¥ PDF ---
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–π—Ç—ã PDF –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        pdf_bytes = pdf.output() # 'S' –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∫–æ–¥–∏—Ä—É–µ–º –≤ latin-1 –¥–ª—è –±–∞–π—Ç–æ–≤
        return bytes(pdf_bytes) # –ò–ª–∏ return bytes(pdf_bytes) - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∫–æ—Ç–æ—Ä–æ–µ —É –≤–∞—Å —Ç–∞–º
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    # --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∏ –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
    with st.sidebar:
        st.image("https://i.ibb.co/yWXkh9Q/Screenshot-from-2024-05-14-16-04-34.png", width=100) # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞, –∑–∞–º–µ–Ω–∏—Ç–µ URL
        st.title("–ú–µ–Ω—é")

        selected = option_menu(
            menu_title=None, #"–ù–∞–≤–∏–≥–∞—Ü–∏—è", # None —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            options=["–ê–Ω–∞–ª–∏–∑", "–ö–∞—Ä—Ç–∞", "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            icons=["images", "map", "info-circle", "envelope"], # –ò–∫–æ–Ω–∫–∏ Bootstrap
            menu_icon="list", # –ò–∫–æ–Ω–∫–∞ –º–µ–Ω—é
            default_index=0,
            styles={ # –ù–µ–º–Ω–æ–≥–æ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é
                "container": {"padding": "5px !important", "background-color": "#fafafa"},
                "icon": {"color": "#4CAF50", "font-size": "23px"},
                "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#e8f5e9"},
                "nav-link-selected": {"background-color": "#4CAF50"},
            }
        )
        st.sidebar.markdown("---")
        st.sidebar.info("¬© 2024-2025 –°–∏—Å—Ç–µ–º–∞ –û—Ü–µ–Ω–∫–∏ –£–≥–æ–¥–∏–π")

    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---

    if selected == "–ê–Ω–∞–ª–∏–∑":
        st.markdown("<h1>üåø –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≥–æ–¥–∏–π üåø</h1>", unsafe_allow_html=True)
        st.markdown("<h3>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–Ω–∏–º–æ–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑</h3>", unsafe_allow_html=True)

        # --- –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ---
        st.subheader("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        st.write("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: TIF, TIFF, JPG, JPEG, PNG (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è TIF/TIFF –¥–ª—è –º—É–ª—å—Ç–∏—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª...", type=["tif", "tiff", "jpg", "jpeg", "png"], label_visibility="collapsed")

        if uploaded_file is not None:
            try:
                image_pil_original = Image.open(uploaded_file)
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ EXIF
                image_pil_corrected = correct_image_orientation(image_pil_original)
                image_array = np.array(image_pil_corrected) # –†–∞–±–æ—Ç–∞–µ–º —Å –º–∞—Å—Å–∏–≤–æ–º numpy
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
                st.stop() # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è

            st.success(f"–§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

            if len(image_array.shape) < 3 or image_array.shape[2] < 3:
                 st.error("–û—à–∏–±–∫–∞: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 –∫–∞–Ω–∞–ª–∞ (RGB).")
                 st.stop()

            num_channels = image_array.shape[2]
            st.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: **{num_channels}**")

            # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø–æ—Ä—è–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ ---
            global red_index, green_index, blue_index, nir_index # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            red_index, green_index, blue_index, nir_index = 0, 1, 2, None # –ü–æ—Ä—è–¥–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é R, G, B

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # st.info("–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: 0-Red, 1-Green, 2-Blue, 3-NIR (–µ—Å–ª–∏ –µ—Å—Ç—å).")

            if num_channels >= 4:
                nir_index = 3 # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ NIR - 4–π –∫–∞–Ω–∞–ª (–∏–Ω–¥–µ–∫—Å 3)
                st.success("–û–±–Ω–∞—Ä—É–∂–µ–Ω 4-–π –∫–∞–Ω–∞–ª, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è NIR. –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã.")
                # –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö NIR + RGB –∏–Ω–¥–µ–∫—Å—ã
                available_indices = ['NDVI', 'GNDVI', 'ENDVI', 'CVI', 'OSAVI', 'VARI', 'ExG', 'GLI', 'RGBVI']
            else:
                st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ 3 –∫–∞–Ω–∞–ª–∞ (RGB). NIR-–∑–∞–≤–∏—Å–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã (NDVI, GNDVI –∏ —Ç.–¥.) –Ω–µ –±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.")
                # –¢–æ–ª—å–∫–æ RGB –∏–Ω–¥–µ–∫—Å—ã
                available_indices = ['VARI', 'ExG', 'GLI', 'RGBVI']

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–ª—è –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ RGB)
            try:
                image_pil_rgb = image_pil_corrected.convert('RGB')
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                st.stop()

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.image(image_pil_rgb, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (RGB –≤–∏–¥)", use_column_width=True)

            st.markdown("---")
            st.subheader("2. –í—ã–±–æ—Ä –∏–Ω–¥–µ–∫—Å–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

            col_index, col_threshold = st.columns(2)
            with col_index:
                selected_index = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å:", available_indices)
            with col_threshold:
                 # –ü–æ—Ä–æ–≥ –∑–∞—Å—É—Ö–∏ —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å, –¥–æ –≤–∫–ª–∞–¥–æ–∫
                 threshold_value = st.slider("–ü–æ—Ä–æ–≥ –∑–∞—Å—É—Ö–∏ (–Ω–æ—Ä–º. –∏–Ω–¥–µ–∫—Å < –ø–æ—Ä–æ–≥–∞ = —Å—É—à–µ)", 0.0, 1.0, 0.35, step=0.05, key="threshold_main", help="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∑–∞—Å—É—à–ª–∏–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤. –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –æ–±—ã—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–µ—Å—Å—É –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")

            st.markdown("---")

            # --- –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ---
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):

                    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
                    model = load_model()
                    if model is None:
                        st.error("–ê–Ω–∞–ª–∏–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –º–æ–¥–µ–ª–∏.")
                        st.stop()

                    # 2. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ RGB –≤–µ—Ä—Å–∏–∏)
                    transform = transforms.Compose([
                        transforms.Resize((128, 128)), # –†–∞–∑–º–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å
                        transforms.ToTensor(),
                        # transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–±—É—á–∞–ª–∞—Å—å —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
                    ])
                    prediction_raw = predict_image(image_pil_rgb, model, transform)

                    # 3. –†–∞—Å—á—ë—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
                    index_result_original = calculate_vegetation_index(image_array, selected_index)

                    if index_result_original is None or np.all(np.isnan(index_result_original)):
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–µ–∫—Å {selected_index}. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ–º—ã–π –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, NIR) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                        st.stop()

                    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω–¥–µ–∫—Å–∞
                    mean_value_original = np.nanmean(index_result_original) # –°—Ä–µ–¥–Ω–µ–µ –¥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏

                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –∫–∞—Ä—Ç—ã (0-1) –∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    min_val = np.nanmin(index_result_original)
                    max_val = np.nanmax(index_result_original)
                    if max_val - min_val > 1e-7:
                         normalized_index = (index_result_original - min_val) / (max_val - min_val)
                    else:
                         # –ï—Å–ª–∏ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã, –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                         normalized_index = np.full_like(index_result_original, 0.5) # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º (0.5)
                         st.info("–ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –≤—Å–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã.")

                    mean_normalized_value = np.nanmean(normalized_index) # –°—Ä–µ–¥–Ω–µ–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

                    # --- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞ ---
                    final_assessment = prediction_raw # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏
                    assessment_note = "" # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
                    # –ü–æ—Ä–æ–≥ –¥–ª—è "–∑–¥–æ—Ä–æ–≤–æ–≥–æ" –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (0.0 - 1.0)
                    # !!! –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–û–¢ –ü–û–†–û–ì –ü–†–ò –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò !!!
                    HEALTHY_INDEX_THRESHOLD = 0.5

                    if "–∑–∞—Å—É—Ö–∞" in prediction_raw.lower() and mean_normalized_value > HEALTHY_INDEX_THRESHOLD:
                        assessment_note = (f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞ –∑–∞—Å—É—Ö—É/—Å—Ç—Ä–µ—Å—Å, –Ω–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "
                                           f"–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ ({mean_normalized_value:.3f}) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ "
                                           f"({HEALTHY_INDEX_THRESHOLD}), —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –±–æ–ª–µ–µ –∑–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
                        final_assessment += " | –ò–Ω–¥–µ–∫—Å: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –≤—ã–≤–æ–¥—É
                        st.info(assessment_note)
                    elif ("–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ" in prediction_raw.lower() or "—Ö–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è" in prediction_raw.lower()) and mean_normalized_value < (HEALTHY_INDEX_THRESHOLD - 0.15): # –ü–æ—Ä–æ–≥ —á—É—Ç—å –Ω–∏–∂–µ
                         assessment_note = (f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "
                                            f"–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ ({mean_normalized_value:.3f}) –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ "
                                            f"(<{HEALTHY_INDEX_THRESHOLD - 0.15}), —á—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–µ—Å—Å —É —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–ª–∏ —Ä–µ–¥–∫—É—é —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
                         final_assessment += " | –ò–Ω–¥–µ–∫—Å: –í–æ–∑–º–æ–∂–µ–Ω —Å—Ç—Ä–µ—Å—Å"
                         st.warning(assessment_note)
                    # --- –ö–æ–Ω–µ—Ü –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ ---

                    # 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏)
                    current_recommendations = []
                    if "–∑–∞—Å—É—Ö–∞" in prediction_raw.lower(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        rec1 = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–∏–≤."
                        rec2 = "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–∏—è –≤–æ–¥–æ—É–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–æ–±–∞–≤–æ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤–ª–∞–≥–∏."
                        rec3 = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–æ–Ω."
                        current_recommendations.extend([rec1, rec2, rec3])
                    elif "–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ" in prediction_raw.lower():
                        rec1 = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —É—Ö–æ–¥–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
                        rec2 = "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω–æ–≤–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è."
                        rec3 = "–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≥–æ–¥–∏–π —Å –ø–æ–º–æ—â—å—é –∏–Ω–¥–µ–∫—Å–æ–≤."
                        current_recommendations.extend([rec1, rec2, rec3])
                    else: # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ
                        current_recommendations.append("–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä —É–≥–æ–¥–∏–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.")

                    st.markdown("---")
                    st.subheader("3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ê–Ω–∞–ª–∏–∑–∞")

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    st.metric(label="–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", value=final_assessment)
                    if assessment_note:
                         st.caption(assessment_note) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    st.write(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ **{selected_index}** (–Ω–µ–Ω–æ—Ä–º.): **{mean_value_original:.3f}**")
                    st.write(f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ **{selected_index}** (–Ω–æ—Ä–º.): **{mean_normalized_value:.3f}**")

                    st.markdown("##### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in current_recommendations:
                        st.markdown(f"- {rec}")

                    # --- –í–∫–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ ---
                    st.markdown("---")
                    st.subheader("4. –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                    tab1, tab2, tab3 = st.tabs([
                        f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ {selected_index}",
                        "üìè –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏",
                        f"üíß –ü–ª–æ—â–∞–¥—å –∑–∞—Å—É—Ö–∏ (–ò–Ω–¥–µ–∫—Å < {threshold_value:.2f})"
                    ])

                    # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∏ –∑–∞—Å—É—Ö–∏ ---
                    gsd_width_m_px, gsd_height_m_px = None, None
                    area_m2, area_ha, area_km2 = 0, 0, 0
                    ground_width_m, ground_height_m = 0, 0
                    flight_params_dict = {}
                    index_map_buffer = None # –ë—É—Ñ–µ—Ä –¥–ª—è PDF
                    dryness_area_ha = 0
                    dryness_percent = 0
                    dryness_additive_calculation_text = "–†–∞—Å—á–µ—Ç –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è." # –¢–µ–∫—Å—Ç –¥–ª—è PDF

                    # --- –í–∫–ª–∞–¥–∫–∞ 1: –ö–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ ---
                    with tab1:
                        st.subheader(f"–ö–∞—Ä—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ {selected_index} (–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)")
                        try:
                            index_map_fig, ax = plt.subplots(figsize=(10, 8)) # –†–∞–∑–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (0-1) –¥–ª—è RdYlGn
                            im = ax.imshow(normalized_index, cmap='RdYlGn', vmin=0, vmax=1)
                            ax.set_title(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å {selected_index}")
                            ax.axis('off')
                            # Colorbar —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                            cbar = plt.colorbar(im, ax=ax, fraction=0.046, pad=0.04, shrink=0.7)
                            cbar.set_label(f"–ó–Ω–∞—á–µ–Ω–∏–µ {selected_index}", rotation=270, labelpad=15)
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–∫–∏ –Ω–∞ colorbar –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö min/max
                            ticks = np.linspace(0, 1, 6)
                            tick_labels = [f"{min_val + (max_val-min_val)*v:.2f}" for v in ticks]
                            cbar.set_ticks(ticks)
                            cbar.set_ticklabels(tick_labels)

                            st.pyplot(index_map_fig)

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –≤ –±—É—Ñ–µ—Ä –¥–ª—è PDF
                            index_map_buffer = io.BytesIO()
                            index_map_fig.savefig(index_map_buffer, format='png', bbox_inches='tight', dpi=150)
                            index_map_buffer.seek(0)
                            plt.close(index_map_fig) # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –∏–Ω–¥–µ–∫—Å–∞: {e}")
                            index_map_buffer = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

                    # --- –í–∫–ª–∞–¥–∫–∞ 2: –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ ---
                    with tab2:
                        st.subheader("–†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ —É–≥–æ–¥–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å—ä–µ–º–∫–∏")
                        image_width_px, image_height_px = image_pil_corrected.size
                        metadata = get_image_metadata(image_pil_corrected)

                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ EXIF
                        focal_length_exif = metadata.get('FocalLength', None)
                        focal_length_default = 35.0 # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if focal_length_exif is not None:
                            try:
                                if isinstance(focal_length_exif, tuple) and len(focal_length_exif) == 2 and focal_length_exif[1] != 0:
                                    focal_length_default = float(focal_length_exif[0]) / float(focal_length_exif[1])
                                else:
                                    focal_length_default = float(focal_length_exif)
                                st.caption(f"–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {focal_length_default:.2f} –º–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
                            except (ValueError, TypeError, ZeroDivisionError):
                                st.caption("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ EXIF. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (35.0 –º–º).")
                                focal_length_default = 35.0
                        else:
                            st.caption("–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (35.0 –º–º).")

                        st.markdown("##### –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞ –∏ –∫–∞–º–µ—Ä—ã:")
                        f_col1, f_col2 = st.columns(2)
                        with f_col1:
                            flight_altitude = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ–ª–µ—Ç–∞ (–º)", min_value=1.0, value=100.0, step=5.0, key="altitude_input", help="–°—Ä–µ–¥–Ω—è—è –≤—ã—Å–æ—Ç–∞ –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –∑–µ–º–ª–∏.")
                            sensor_width = st.number_input("–®–∏—Ä–∏–Ω–∞ —Å–µ–Ω—Å–æ—Ä–∞ (–º–º)", min_value=1.0, value=23.5, step=0.1, key="sensor_w_input", help="–ù–∞–ø—Ä–∏–º–µ—Ä, APS-C ~23.5–º–º, Full Frame ~36–º–º.")
                        with f_col2:
                            focal_length = st.number_input("–§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º–º)", min_value=1.0, value=focal_length_default, step=1.0, key="focal_input")
                            sensor_height = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–µ–Ω—Å–æ—Ä–∞ (–º–º)", min_value=1.0, value=15.6, step=0.1, key="sensor_h_input", help="–ù–∞–ø—Ä–∏–º–µ—Ä, APS-C ~15.6–º–º, Full Frame ~24–º–º.")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
                        flight_params_dict = {
                            "altitude": flight_altitude, "focal_length": focal_length,
                            "sensor_width": sensor_width, "sensor_height": sensor_height
                        }

                        # –†–∞—Å—á–µ—Ç GSD –∏ –ø–ª–æ—â–∞–¥–∏
                        try:
                            gsd_width_m_px, gsd_height_m_px = calculate_gsd(
                                flight_altitude, focal_length, sensor_width, sensor_height, image_width_px, image_height_px
                            )
                            if gsd_width_m_px > 0 and gsd_height_m_px > 0:
                                area_m2, ground_width_m, ground_height_m = calculate_image_area(
                                    gsd_width_m_px, gsd_height_m_px, image_width_px, image_height_px
                                )
                                area_ha = area_m2 / 10000
                                area_km2 = area_m2 / 1_000_000

                                st.markdown("##### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏:")
                                st.metric("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ (GSD)", f"{gsd_width_m_px*100:.2f} —Å–º/–ø–∏–∫—Å (—à–∏—Ä–∏–Ω–∞), {gsd_height_m_px*100:.2f} —Å–º/–ø–∏–∫—Å (–≤—ã—Å–æ—Ç–∞)")
                                m_col1, m_col2, m_col3 = st.columns(3)
                                m_col1.metric("–ü–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è", f"{area_ha:.3f} –≥–∞")
                                m_col2.metric("–®–∏—Ä–∏–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ", f"{ground_width_m:.2f} –º")
                                m_col3.metric("–í—ã—Å–æ—Ç–∞ –Ω–∞ –∑–µ–º–ª–µ", f"{ground_height_m:.2f} –º")
                                st.caption(f"–ü–ª–æ—â–∞–¥—å –ø–æ–∫—Ä—ã—Ç–∏—è: {area_km2:.5f} –∫–º¬≤")
                            else:
                                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å GSD. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞ –∏ –∫–∞–º–µ—Ä—ã.")
                                area_ha = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å, –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–ª–æ—â–∞–¥–∏: {e}")
                            area_ha = 0

                    # --- –í–∫–ª–∞–¥–∫–∞ 3: –ü–ª–æ—â–∞–¥—å –∑–∞—Å—É—Ö–∏ ---
                    with tab3:
                        st.subheader(f"–†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ —É—á–∞—Å—Ç–∫–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–æ–º {selected_index} < {threshold_value:.2f}")

                        if area_ha > 0 and gsd_width_m_px is not None and gsd_height_m_px is not None:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
                            dryness_mask = normalized_index < threshold_value
                            dryness_pixels = np.sum(dryness_mask) # –°—É–º–º–∞ –ø–∏–∫—Å–µ–ª–µ–π –≤ –º–∞—Å–∫–µ

                            # –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –æ–¥–Ω–æ–≥–æ –ø–∏–∫—Å–µ–ª—è (—Å—Ä–µ–¥–Ω–µ–µ GSD)
                            pixel_area_m2 = gsd_width_m_px * gsd_height_m_px
                            dryness_area_m2 = dryness_pixels * pixel_area_m2
                            dryness_area_ha = dryness_area_m2 / 10000
                            dryness_percent = (dryness_area_ha / area_ha) * 100 if area_ha > 0 else 0

                            st.metric("–ü–ª–æ—â–∞–¥—å –∑–∞—Å—É—à–ª–∏–≤—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤", f"{dryness_area_ha:.3f} –≥–∞")
                            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏", f"{dryness_percent:.1f}%")

                            # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–±–∞–≤–æ–∫
                            if dryness_area_ha > 0 and "–∑–∞—Å—É—Ö–∞" in prediction_raw.lower(): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                                recommended_dose_t_per_ha = 4.64 # –ü—Ä–∏–º–µ—Ä –¥–æ–∑—ã –≤ —Ç–æ–Ω–Ω–∞—Ö –Ω–∞ –≥–µ–∫—Ç–∞—Ä
                                total_additive = dryness_area_ha * recommended_dose_t_per_ha
                                st.markdown("##### –†–∞—Å—á–µ—Ç –≤–æ–¥–æ—É–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–æ–±–∞–≤–æ–∫ (–ü—Ä–∏–º–µ—Ä):")
                                st.write(f"- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞: {recommended_dose_t_per_ha:.2f} —Ç/–≥–∞ (—É—á–∞—Å—Ç–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º < {threshold_value:.2f})")
                                st.write(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–∫–∏:** **{total_additive:.2f} —Ç** (–Ω–∞ {dryness_area_ha:.3f} –≥–∞)")
                                dryness_additive_calculation_text = (f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–∑–∞ –≤–æ–¥–æ—É–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–æ–±–∞–≤–æ–∫: {recommended_dose_t_per_ha:.2f} —Ç/–≥–∞. "
                                                                   f"–¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ {dryness_area_ha:.3f} –≥–∞: {total_additive:.2f} —Ç.")
                            elif "–∑–∞—Å—É—Ö–∞" not in prediction_raw.lower():
                                 st.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ü–µ–Ω–µ–Ω–æ –∫–∞–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ, —Ä–∞—Å—á–µ—Ç –≤–æ–¥–æ—É–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–æ–±–∞–≤–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                                 dryness_additive_calculation_text = "–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ü–µ–Ω–µ–Ω–æ –∫–∞–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ, —Ä–∞—Å—á–µ—Ç –≤–æ–¥–æ—É–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö –¥–æ–±–∞–≤–æ–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
                            else: # –ï—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –∑–∞—Å—É—Ö–∏ = 0
                                 st.info("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–∫–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–æ–º –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.")
                                 dryness_additive_calculation_text = "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–∫–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–æ–º –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞."

                        else:
                            st.warning("–†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ –∑–∞—Å—É—Ö–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é –ø–ª–æ—â–∞–¥—å –≤–æ –≤–∫–ª–∞–¥–∫–µ '–†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏'.")
                            dryness_additive_calculation_text = "–†–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω (–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞)."

                    # --- –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫) ---
                    st.markdown("---")
                    st.subheader("5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –¥–ª—è PDF
                    original_image_buffer = io.BytesIO()
                    try:
                         image_pil_rgb.save(original_image_buffer, format='PNG')
                         original_image_buffer.seek(0)
                    except Exception as e:
                         st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è PDF: {e}")
                         original_image_buffer = None

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF
                    if original_image_buffer and index_map_buffer and flight_params_dict:
                        pdf_bytes = generate_pdf_report(
                             original_image_buffer=original_image_buffer,
                             final_assessment=final_assessment,
                             assessment_details=assessment_note if assessment_note else f"–°—Ä–µ–¥–Ω–µ–µ –Ω–æ—Ä–º. –∑–Ω–∞—á–µ–Ω–∏–µ {selected_index}: {mean_normalized_value:.3f}",
                             selected_index=selected_index,
                             mean_value_original=mean_value_original,
                             index_map_buffer=index_map_buffer,
                             recommendations=current_recommendations,
                             area_ha=area_ha, ground_width=ground_width_m, ground_height=ground_height_m, area_km2=area_km2,
                             flight_params=flight_params_dict,
                             dryness_threshold_normalized=threshold_value,
                             dryness_area_ha=dryness_area_ha, dryness_percent=dryness_percent,
                             dryness_additive_calc=dryness_additive_calculation_text
                        )

                        if pdf_bytes:
                             st.download_button(
                                 label="üì• –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç",
                                 data=pdf_bytes,
                                 file_name=f"report_{selected_index}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                                 mime="application/pdf",
                                 help="–°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF."
                             )
                        else:
                             st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞.")
                    else:
                         st.warning("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –∏–Ω–¥–µ–∫—Å–∞ –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å).")

            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑" –Ω–µ –Ω–∞–∂–∞—Ç–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        else:
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")

    elif selected == "–ö–∞—Ä—Ç–∞":
        st.markdown("<h1>üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</h1>", unsafe_allow_html=True)
        st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–µ–≥–∏–æ–Ω", unsafe_allow_html=True)
        interactive_map() # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        st.caption("–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–±–∑–æ—Ä–∞. –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –∫–∞—Ä—Ç—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤.")

    elif selected == "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏":
        st.markdown("<h1>üìÑ –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h1>", unsafe_allow_html=True)
        st.markdown("---")
        st.markdown(
            """
            **–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–≥–æ–¥–∏–π (–í–µ—Ä—Å–∏—è 1.1)** - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≥—Ä–æ–Ω–æ–º–æ–≤, —Ñ–µ—Ä–º–µ—Ä–æ–≤ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π,
            –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—É–ª—å—Ç–∏—Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö –∏–ª–∏ RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

            **–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
            * **–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ TIF, TIFF, JPG, JPEG, PNG.
            * **–†–∞—Å—á–µ—Ç –≤–µ–≥–µ—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤:** –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ NDVI (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ NIR), VARI, ExG, GLI –∏ –¥—Ä—É–≥–∏—Ö.
            * **–û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª–∏ –ò–ò –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞—Å—É—Ö–∞/–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ), —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞.
            * **–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è:** –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞–≥–ª—è–¥–Ω–æ–π –∫–∞—Ä—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –ø–æ–ª—é.
            * **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Ö–æ–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
            * **–†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏:** –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–Ω–∏–º–∫–∞ –∏ GSD –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–µ—Ç–∞ –∏ –∫–∞–º–µ—Ä—ã.
            * **–ê–Ω–∞–ª–∏–∑ –∑–æ–Ω —Å—Ç—Ä–µ—Å—Å–∞:** –†–∞—Å—á–µ—Ç –ø–ª–æ—â–∞–¥–∏ —É—á–∞—Å—Ç–∫–æ–≤, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.
            * **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤:** –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ PDF-–æ—Ç—á–µ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.

            **–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:**
            1.  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≥–æ–¥–∏–π.
            2.  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã.
            3.  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –∑–∞–¥–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä–æ–≥ –∑–∞—Å—É—Ö–∏).
            4.  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            5.  –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–ª–æ—â–∞–¥–∏ (–æ–±—â–∞—è –∏ –∑–æ–Ω —Å—Ç—Ä–µ—Å—Å–∞) –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—ä–µ–º–∫–∏.
            6.  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –≤–∏–¥–µ PDF-–æ—Ç—á–µ—Ç–∞.

            **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
            * –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –ò–ò –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–ª–∞—Å—å –º–æ–¥–µ–ª—å (`model.pth`). –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–º.
            * –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–µ—Ç–∞ –∏ –∫–∞–º–µ—Ä—ã, –∞ —Ç–∞–∫–∂–µ –æ—Ç —Ä–µ–ª—å–µ—Ñ–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø–ª–æ—Å–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å).
            * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ (R, G, B, NIR) –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è—Ö. –î–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞–º–µ—Ä –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–¥–∞.
            """
        )

    elif selected == "–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        st.markdown("<h1>üìß –ö–æ–Ω—Ç–∞–∫—Ç—ã</h1>", unsafe_allow_html=True)
        st.markdown("---")
        st.write(
            """
            –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Ä–∞–±–æ—Ç–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º –æ–± –æ—à–∏–±–∫–∞—Ö,
            –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:

            **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** (–í–∞—à–µ –ò–º—è –∏–ª–∏ –ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–º–ø–∞–Ω–∏–∏)

            * **Email:** `Alina@gmail.com` 
            * **–¢–µ–ª–µ—Ñ–æ–Ω:** `+X (XXX) XXX-XX-XX` 
            * **–í–µ–±-—Å–∞–π—Ç/GitHub:** 

            –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã!
            """
        )

if __name__ == "__main__":
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ---
    if not os.path.exists(FONT_PATH):
        st.warning(
            f"–í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ '{FONT_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω! "
            f"–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –≤ PDF-–æ—Ç—á–µ—Ç–µ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ TTF-—Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DejaVuSans.ttf) –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç."
        )
    main()